name: svm-klee-1
on:
  push:
jobs:
  run-klee:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2 
     
      - name: Install Klee and STP dependencies
        run: |
          pwd
          sudo apt-get update
          sudo apt-get install -y build-essential cmake curl file g++-multilib gcc-multilib git libcap-dev libunwind-dev libgoogle-perftools-dev libncurses5-dev libsqlite3-dev libtcmalloc-minimal4 python3-pip unzip graphviz doxygen bison flex libboost-all-dev perl zlib1g-dev minisat
          sudo pip3 install lit wllvm
          sudo apt-get install -y clang-13 llvm-13 llvm-13-dev llvm-13-tools 
      - name: Install STP (a dependency to Klee)
        run: |
          git clone https://github.com/stp/stp.git /tmp/stp
          cd /tmp/stp && git checkout tags/2.3.3
          mkdir build && cd build
          cmake .. && make 
          sudo make install
          ulimit -s unlimited
      
      - name: Downloading Google Test Sources (a dependency to Klee)
        run: |
          mkdir -p /tmp/gtest && cd /tmp/gtest
          curl -OL https://github.com/google/googletest/archive/release-1.11.0.zip && unzip release-1.11.0.zip
      
      - name: Build uClibc and the POSIX environment model
        run: |
          git clone https://github.com/klee/klee-uclibc.git /tmp/klee-uclibc
          cd /tmp/klee-uclibc && ./configure --make-llvm-lib --with-cc clang-13 --with-llvm-config llvm-config-13
          make -j2 
          cd ..
      
      - name: Cloning and building libc++ (a dependency to Klee)
        run: | 
          git clone https://github.com/klee/klee.git /tmp/klee
          cd /tmp/klee && git checkout 26632f1d883e1343a23fd200d2dde070707b294d
          sudo LLVM_VERSION=13 BASE=/usr/lib ENABLE_OPTIMIZED=1 DISABLE_ASSERTIONS=1 ENABLE_DEBUG=0 REQUIRES_RTTI=1 /tmp/klee/scripts/build/build.sh libcxx
      
      - name: Configuring and Building Klee
        run: |
          cd /tmp/klee
          mkdir build && cd build 
          cmake -DENABLE_SOLVER_STP=ON -DENABLE_POSIX_RUNTIME=ON -DKLEE_UCLIBC_PATH=/tmp/klee-uclibc -DENABLE_UNIT_TESTS=ON -DGTEST_SRC_DIR=/tmp/gtest/googletest-release-1.11.0 ..
          make
      - name: Pull benchmark
        run: |
          git clone https://gitlab.com/sosy-lab/benchmarking/sv-benchmarks.git
      - name: Run Klee Analyzer
        run: |
          #!/bin/bash
          set +e 
          
          cd sv-benchmarks/c
          mkdir -p klee_reports          
          include_dirs=$(find . -name '*.h' -exec dirname {} + | sort -u | sed 's/^/-I /')
        
          DIR_FILE="../../directories.txt"
          read -r -a dirs < "$DIR_FILE"
          for dir in "${dirs[@]}"; do
            while IFS= read -r -d '' file; do
              bc_file="${file%.c}.bc"
              echo "Before compilation:"
              if clang-13 -I "$include_dirs" -emit-llvm -c -g -O0 -Xclang -disable-O0-optnone "$file" -o "$bc_file" 2>/dev/null; then
                echo "After compilation:"
              
                if ! /usr/lib/llvm-13/bin/llvm-nm "$PWD/$bc_file" | grep -q " T main"; then
                  rm "$bc_file"
                else
                  ls -l "$bc_file"
                  echo "klee directory $dir"
                  dir_name=$(basename "${dir%/}")
                  echo "klee directory after process $dirname"
                  ulimit -t 60 
                  for i in {1..10}; do
                    output_file="klee_reports/$dir_name/$(basename "$file" .c)/$i.txt"
                    mkdir -p "./klee_reports/$dir_name/$(basename "$file" .c)/"
                    klee_output=$(timeout 10s /tmp/klee/build/bin/klee "$bc_file" 2>&1 | tee -a "$output_file")
                    # klee_output=$(/tmp/klee/build/bin/klee "$bc_file" )
                    klee_exit_code=$?
                  done
                  if [[ $klee_exit_code -eq 0 ]]; then
                    timeout 10s /tmp/klee/build/bin/klee "$bc_file"
                    echo ""
                  elif [[ $klee_exit_code -eq 1 && $klee_output =~ "Invalid record" ]]; then
               	    continue 
                  else
                    continue
                  fi
                fi
              else
                continue
              fi
            done < <(find  "$dir" -name "*.c" -exec grep -q "int main" {} \; -print0)
          done
        
      - name: Upload Klee reports
        uses: actions/upload-artifact@v4
        with:
          name: klee-report
          path: './sv-benchmarks/c/klee_reports/*'
